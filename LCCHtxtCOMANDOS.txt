php artisan make:model Cliente --resource //CREAR MODELO Y CONTROLADOR
ng g c componentes/gestiones/name --skip-tests //crear componente
ng generate module componentes/gestiones/name --routing //crear modulos
ng g service servicios/gestiones/name --skip-tests
ng g interceptor auth --skip-tests
ng generate pipe pipes/filters/filterapellidosnombrescarnet --skip-tests

//=====================================NEW PROYECT?=======================
--NUEVO ENVIRONMENT
1 CREAR MANUALMENTE LOS ARCHIVOS ENVIRONMENT
2 EN LOS ARCHIVOS:
//DESARROLLO
export const environment = {
  production: false,
  apiUrl: 'http://localhost:8000/api' // Ajusta esta URL a tu API de desarrollo
};
//PRODUCCION
export const environment = {
  production: true,
  apiUrl: '' // Ajusta esta URL a tu API de producción
};

EN EL angular.json En el build y serve deberan verse asi
"build": {
  "configurations": {
    "production": {
      "fileReplacements": [
        {
          "replace": "src/environments/environment.ts",
          "with": "src/environments/environment.prod.ts"
        }
      ],
      ...
    }
  }
},
"serve": {
  "configurations": {
    "production": {
      "browserTarget": "your-app-name:build:production"
    }
  }
}

--EVITAR PROBLEMA DE LA TABLA SESSIONS DEL mysql:
SESSION_DRIVER=array //reemplazar y poner ese codigo de: SESSION_DRIVER=database hacia SESSION_DRIVER=array
--INCORPORAR api.php //AL PARECER PARA LOS TOKENS IGUAL ES EN API.PHP
php artisan install:api

--=================================================EN CASO DE USAR TOKENS PERSONALIZADOS.=============================================================
php artisan make:controller AuthController

IMAGINA Q TENGO TABLA CLIENTES CREADO DIRECTAMENTE:
CREATE OR REPLACE TABLE clientes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombres VARCHAR(100) NULL,
    apellidos VARCHAR(100) NULL,
    usuario VARCHAR(50) NULL,
    contrasenia VARCHAR(500) NULL,
    celular INT NULL,
    edad INT NULL,
    fechnac DATE NULL,
    carnet VARCHAR(50) NULL,
    foto VARCHAR(500) NULL,
    created_at DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

----PASO 1:ENTONCES EL MODELO DE ESTE DEBERA ESTAR ASI:
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Laravel\Sanctum\HasApiTokens;

class Cliente extends Authenticatable //AHORA Authenticatable
{
    use HasApiTokens, HasFactory;

    protected $table = 'clientes';

    // Lista de atributos asignables
    protected $fillable = [
        'nombres', 'apellidos', 'usuario', 'contrasenia', 'celular', 'edad', 'fechnac', 'carnet', 'foto'
    ];
}

----PASO 2: crear tabla
CREATE TABLE `personal_access_tokens` (
    `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
    `tokenable_type` VARCHAR(255) NOT NULL,
    `tokenable_id` BIGINT(20) UNSIGNED NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `token` VARCHAR(64) NOT NULL,
    `abilities` TEXT,
    `last_used_at` TIMESTAMP NULL,
    `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    INDEX `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type`, `tokenable_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
ALTER TABLE `personal_access_tokens`
ADD COLUMN `expires_at` TIMESTAMP NULL AFTER `abilities`;


Ó ESTA MEJOR:
CREATE TABLE `personal_access_tokens` (
    `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,
    `tokenable_type` VARCHAR(255) NOT NULL,
    `tokenable_id` BIGINT(20) UNSIGNED NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `token` VARCHAR(64) NOT NULL,
    `abilities` TEXT,
    `expires_at` TIMESTAMP NULL,
    `last_used_at` TIMESTAMP NULL,
    `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    INDEX `personal_access_tokens_tokenable_type_tokenable_id_index` (`tokenable_type`, `tokenable_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;


----PASO 3: INSTALAR LARAVEL SANCTUM O CONFIGURAR:
composer require laravel/sanctum
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"

----PASO 4: ahora asi se ve el authenticador AuthController
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Cliente;

class AuthController extends Controller
{
    public function login(Request $request)
    {
        // validar
        $request->validate([
            "usuario" => "required",
            "contrasenia" => "required",
        ]);

        // verificar
        $user = $request->input('usuario');
        $pass = $request->input('contrasenia');

        $admin = Cliente::where('usuario', '=', $user)->where('contrasenia', '=', $pass)->first();

        if ($admin) {
            // generar token
            //$tokenResult = $admin->createToken("login");
            $tokenResult = $admin->createToken('login', ['*'], now()->addMinutes(60));
            $token = $tokenResult->plainTextToken;

            // responder
            return response()->json([
                "access_token" => $token, //ES SI SE GUARDA POR EL FUTURO INTERCEPTOR EN ANGULAR
                "token_type" => "Bearer", //PODEMOS GUARDAR ESTA VARIABLE EN UN localStorage
                "usuario" => $admin //PODEMOS GUARDAR ESTA VARIABLE EN UN localStorage
            ]);
        } else {
            return response()->json([
                "message" => "Nombre de usuario o contraseña incorrectos."
            ], 401);
        }
    }
}

---PASO 5 en el config/sanctum.php: CONFIGURAR TIEMPO DE EXPIRACION DEL TOKENS
'expiration'=>60  //de 60minutos //AL PARECER CON TOKENS PERSONALIZADOS NO FUNCIONA

--PASO 5.1: COSAS QUE SABER DE LOS TOKENS PERSONALIZADOS
es interesante q cuando se use el token  el ultimo uso este siempre actualizandose. DATASO...

es interesante que funcione el expires_at, cuando expira en BD entonces cuando se utiliza este token expirado no permite el acceso a la api ya q esta expirado
ahora como en el PASO 6 crearé interceptores entonces como detecta q esta expirado entonces elimino del localStorage el TOKEN y nos retorna a inicio,
COMO YA SABEMOS Q FUNCIONA ESTO ENTONCES HAY Q HACER Q TENGA FECHA DE EXPIRACION: SOLO FALTARIA HACER que tenga tiempo de expiracion los token en la BD
en donde creamos el token poner:
PASO 5.2: PONIENDO CODIGO PARA Q TENGA EXPIRACION EL TOKEN//REEMPLAZANDO ESTE CODIGO: $tokenResult = $admin->createToken("login"); //RECUERDA Q ESTE ES UN EJEMPLO DE 15MINUTOS
$tokenResult = $admin->createToken('login', ['*'], now()->addDays(7));
O SI QUEREMOS POR MINUTOS ENTONCES
$tokenResult = $admin->createToken('login', ['*'], now()->addMinutes(15)); //15minutos

SI FUNCIONA; PERO AHORA QUIERO Q EL CAMPO expires_at se actualice cuando el usuario deja inactivo su sesion durante 10 minutos, luego lo retoma porque aun esta dentro
de los 15 minutos, entonces se actualiza a 15minutos el expires_at; pero si retoma su sesion pasado los 15 minutos de antes entonces se pierde su token entonces debera
iniciar de nuevo la sesion, ENTONCES HACEMOS PASO 5.3

PASO 5.3: PARA ACTUALIZACION DE TOKENS SEGUN SESION Y TIEMPO DE INACTIVIDAD
PASO 5.3.1: CREAR EN LARAVEL UN middleware
php artisan make:middleware UpdateTokenExpiration
PASO 5.3.2: PEGAR ESTE CODIGO EN EL MIDDLEWARE CREADO (ESTA EN http/Middleware/UpdateTokenExpiration): //RECUERDA Q ESTE ES UN EJEMPLO DE 15MINUTOS
<?php
namespace App\Http\Middleware;
use Closure;
use Illuminate\Http\Request;
use Laravel\Sanctum\PersonalAccessToken;
use Carbon\Carbon;

class UpdateTokenExpiration
{
    public function handle(Request $request, Closure $next)
    {
        if ($request->user()) {
            $token = $request->bearerToken();
            if ($token) {
                $personalAccessToken = PersonalAccessToken::findToken($token);
                if ($personalAccessToken) {
                    $expiresAt = Carbon::parse($personalAccessToken->expires_at);
                    $now = Carbon::now();

                    if ($now->gt($expiresAt)) {
                        return response()->json(['message' => 'Token expired.'], 401);
                    }

                    $personalAccessToken->expires_at = $now->addMinutes(15); //POR QUERER 15MINUTOS
                    $personalAccessToken->save();
                }
            }
        }

        return $next($request);
    }
}

PASO 5.3.3: Aplicar el Middleware a tus Rutas o Controladores:
Puedes aplicar el middleware directamente en los controladores donde necesites esta lógica. Edita tus controladores para incluir el middleware.
OSEA AUMENTAR ESTE CODIGO DONDE SE NECESITE AUMENTAR, EN SI PONER EN CUALQUIER CONTROLLER DONDE QUIERES Q SE EJECUTE AUTOMATICAMENTE LA ACUTALIZACION//OPTE POR LA PRIMERA

use App\Http\Middleware\UpdateTokenExpiration;
use Illuminate\Routing\Controller;
public function __construct() {
    $this->middleware(UpdateTokenExpiration::class);
}

O SINO MANUAL DIRECTAMENTE EN LAS RUTAS
use App\Http\Middleware\UpdateTokenExpiration;

Route::middleware([UpdateTokenExpiration::class])->group(function () {
    Route::get('/ruta/protegida', [TuControlador::class, 'metodo']);
    // Otras rutas protegidas
});

PASO 5.3.4: COSAS INTERESANTES(ESTO NO SE PONE, SOLO SON CURIOSIDADES)
EN ROUTES/API ESTUVE HACIENDO PRUEBAS, CUANDO LAS RUTAS ESTAN PROTEGIDAS SE ACTUALIZA EL expires_at
Route::middleware("auth:sanctum")->group(function(){
    // Route::resource('Clientes', 'App\Http\Controllers\ClienteController');
    Route::resource('Clientes', ClienteController::class);
});
PERO SI NO TIENE PROTECCION COMO ESTE ENTONCES NO SE ACTUALIZA NADA DE expires_at
Route::resource('Clientes', ClienteController::class);

---PASO 6 : EN EL FRONTEND HACER FUNCIONAR LAS PETICIONES CON INTERCEPTORES "este interceptor sirve para realizar acciones que nos permitimos desde el sactum del api
    PASO 6.1: CREAR ARCHIVO auth.interceptor.ts
    //LO DE AQUI ES COMO UNA CONFIGURACION BASICA EN ESE INTERCEPTOR: EN ESTE CASO SI NO EXISTE EL TOKEN EN BASE DE DATOS ENTONCES NOS REDIRECCIONA AL /inicio
import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpErrorResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';
import { Router } from '@angular/router';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private router: Router) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    const token = localStorage.getItem("token");
    console.log('Interceptor ejecutado, token:', token); // Verificar token

    let tokenizedReq = request.clone({
      setHeaders: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('Tokenized Request:', tokenizedReq); // Verificar request clonada

    return next.handle(tokenizedReq).pipe(
      tap(() => {},
        (error: any) => {
          console.log("ERROR **********", error);
          if (error instanceof HttpErrorResponse && error.status === 401) {
            console.log("TOKEN EXPIRADO");
            localStorage.removeItem("token");
            this.router.navigate(["/inicio"]);
          }
          if (error instanceof HttpErrorResponse && error.status === 403) {
            console.log("PERMISOS INSUFICIENTES");
          }
        }
      )
    );
  }
}

    PASO 6.2: configuracion en app.config.ts: EN SI SOLO DEBEMOS ADICIONAR ESTOS CODIGOS:
    import { HTTP_INTERCEPTORS, provideHttpClient, withInterceptors } from '@angular/common/http';
    import { AuthInterceptor } from './auth.interceptor'; // Ajusta la ruta si es necesario

    adicionar en el providers:  provideHttpClient(),{ provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }


    LO DEMAS DE CODIGO ES DE ESTE PROYECTO
//app.config.ts
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideAnimations } from '@angular/platform-browser/animations'; //IMPORTACION DE animaciones
// import { BrowserModule } from '@angular/platform-browser';
// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { HTTP_INTERCEPTORS, provideHttpClient, withInterceptors } from '@angular/common/http';
import { AuthInterceptor } from './auth.interceptor'; // Ajusta la ruta si es necesario

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),
    provideAnimations(),
    provideHttpClient(),
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }

  ]
};




///DATO EXTRA: PARA SABER LA EXISTENCIA DE NUESTRO TOKEN EN BASE DE DATOS USAR ESTA CONSULTA:
SELECT * FROM personal_access_tokens WHERE token = SHA2('STNkSQxM5La748KFY5S15C6DEjLiIJfeO3Jr35dPbfb6730d', 256);
originalmente era asi: 5|STNkSQxM5La748KFY5S15C6DEjLiIJfeO3Jr35dPbfb6730d.... pero solo nos sirve el: STNkSQxM5La748KFY5S15C6DEjLiIJfeO3Jr35dPbfb6730d




//TOMAR EN CUENTA: Vi Q NO ES NECESARIO PONER ESTO EN EL App.component.ts PERO LO DEJARE IGUAL PARA Q FUNCIONE LOS INTERCEPTORES
ADICIONAR
import { AuthInterceptor } from './auth.interceptor';
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
  ],



=====================================================HASTA ACA TODO BIEN, PODEMOS TRABAJAR ASI======================================================
MIRA MI ROUTES/API
Route::middleware("auth:sanctum")->group(function(){
    Route::resource('Clientes', ClienteController::class);
});


PEEEEERO QUIERO TRABAJAR CON ROLES: LOS ROLES AYUDA A DEFINIR QUE COSAS PUEDE HACER EL USUARIO QUE INICIO SESION
PASO 1: DEFINIR ROLES:
podrías tener roles como admin, editor, viewer, y permisos específicos para acciones como view-cliente create-cliente, update-cliente, delete-cliente, etc.

PASEO 2: AL MOMENTO DE LOGEARSE Y QUE EL CODIGO PASE POR EL AuthController, AL MOMENTO DE CREAR TOKEN PODEMOS DEFINIR UNO DE ESTOS
// Crear un token para un administrador con acceso completo
$tokenResult = $admin->createToken('login', ['*'], now()->addMinutes(60));

// Crear un token para un editor con permisos específicos
$tokenResult = $admin->createToken('login', ['create-cliente', 'update-cliente'], now()->addMinutes(60));

// Crear un token para un viewer con permisos de solo lectura
$tokenResult = $admin->createToken('login', ['view-cliente'], now()->addMinutes(60));


PASO 3: CREAR EL MIDDLEWARE PARA REVISAR LAS HABILIDADES EN LARAVEL
php artisan make:middleware CheckAbilities

DENTRO DE ESTE MIDDLEWARE PONER ESTE CODIGO:
<?php
namespace App\Http\Middleware;
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Laravel\Sanctum\PersonalAccessToken;

class CheckAbilities
{
    public function handle(Request $request, Closure $next, ...$abilities)
    {
        // Log::info('Middleware CheckAbilities iniciado.');

        // Obtener el token de la solicitud
        $token = $request->bearerToken();
        // Log::info('Token recibido: ' . $token);

        if ($token) {
            // Buscar el token en la base de datos
            $personalAccessToken = PersonalAccessToken::findToken($token);
            if ($personalAccessToken) {
                // Log::info('Token encontrado en la base de datos.');

                // Obtener el cliente asociado con el token
                $cliente = $personalAccessToken->tokenable; // Asumiendo que 'tokenable' es la relación correcta
                // Log::info('Cliente asociado con el token: ' . $cliente->id);

                if ($cliente) {
                    // Verificar las habilidades del token
                    foreach ($abilities as $ability) {
                        if (!$personalAccessToken->can($ability)) {
                            // Log::warning('Falta de habilidad: ' . $ability);
                            return response()->json(['message' => 'PERMISOS INSUFICIENTES.'], 403);
                        }
                    }

                    // // Log::info('Middleware CheckAbilities finalizado.');
                    return $next($request);
                }
            } else {
                // Log::warning('Token no encontrado en la base de datos.');
            }
        } else {
            // Log::warning('Token no recibido en la solicitud.');
        }

        // Log::warning('Acceso no autorizado.');
        return response()->json(['message' => 'TOKEN EXPIRADO DESDE VERIFICACION DE HABILIDADES.'], 401);
    }
}

OJO ESTE ULTIMO ES MEJOR QUE EL DE ARRIBA
<?php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Laravel\Sanctum\PersonalAccessToken;

class CheckAbilities
{
    public function handle(Request $request, Closure $next, ...$abilities)
    {
        $token = $request->bearerToken();

        if (!$token) {
            return response()->json(['message' => 'Token no proporcionado'], 401);
        }

        $personalAccessToken = PersonalAccessToken::findToken($token);
        if (!$personalAccessToken) {
            return response()->json(['message' => 'Token inválido o expirado'], 401);
        }

        $cliente = $personalAccessToken->tokenable;
        if (!$cliente) {
            return response()->json(['message' => 'Usuario no encontrado'], 401);
        }

        $hasAbility = false;
        foreach ($abilities as $ability) {
            if ($personalAccessToken->can($ability)) {
                $hasAbility = true;
                break;
            }
        }

        if (!$hasAbility) {
            return response()->json(['message' => 'PERMISOS INSUFICIENTES.'], 403);
        }

        return $next($request);
    }

}







PASO 4: ACTUALIZAR COMO SE VERIA NUESTRO ROUTE API // YA Q USAMOS auth:sanctum

---PRIMERA FORMA:
use App\Http\Controllers\ClienteController;
use App\Http\Middleware\CheckAbilities;

Route::middleware(['auth:sanctum'])->group(function () {
    Route::get('/Clientes', [ClienteController::class, 'index'])->middleware([CheckAbilities::class . ':view-cliente']);
    Route::post('/Clientes', [ClienteController::class, 'store'])->middleware([CheckAbilities::class . ':create-cliente']);
    Route::put('/Clientes/{id}', [ClienteController::class, 'update'])->middleware([CheckAbilities::class . ':update-cliente']);
    Route::delete('/Clientes/{id}', [ClienteController::class, 'destroy'])->middleware([CheckAbilities::class . ':delete-cliente']);
});

---SEGUNDA FORMA:
use App\Http\Controllers\ClienteController;
use App\Http\Middleware\CheckAbilities;
Route::middleware(['auth:sanctum'])->group(function () {
    // Ruta para clientes con habilidades específicas
    Route::middleware([CheckAbilities::class . ':view-cliente'])->group(function () {
        Route::get('/Clientes', [ClienteController::class, 'index']);
    });

    Route::middleware([CheckAbilities::class . ':view-cliente'])->group(function () {
        Route::get('/Clientes/{id}', [ClienteController::class, 'show']);
    });

    Route::middleware([CheckAbilities::class . ':create-cliente'])->group(function () {
        Route::post('/Clientes', [ClienteController::class, 'store']);
    });

    Route::middleware([CheckAbilities::class . ':update-cliente'])->group(function () {
        Route::put('/Clientes/{id}', [ClienteController::class, 'update']);
    });

    Route::middleware([CheckAbilities::class . ':delete-cliente'])->group(function () {
        Route::delete('/Clientes/{id}', [ClienteController::class, 'destroy']);
    });
});

---COSAS Q SABER:
LAS RUTAS SE EJECUTARAN SIEMPRE Y CUANDO CUMPLA CON LAS HABILIDADES, PERO EN CASO DE QUE PARA EJECUTAR LA RUTA SE
NECESITE MAS DE UNA HABILIDAD, EJEMPLO: abilities=["view-cliente","cliente"]  //el "cliente" como LCCH lo puedo usar para saber el tipo de usuario

ENTONCES EN [CheckAbilities::class . ':view-cliente']: AÑADIR UN "," y el nombre......
OSEA:
[CheckAbilities::class . ':view-cliente,cliente']


--OTRA COSA Q SABER:
SI EN MI BD TENGO ["view-cliente","cliente"]
y en los ROUTES API ESTA CONFIGURADO ASI: [CheckAbilities::class . ':view-cliente'] //SI SE ACCEDERA A LA RUTA YA Q ES SUFICIENTE QUE TENGA EL view-cliente en el BD
TENER CUIDADO CON ESO

======CREAR EL LOGOUT PARA QUITAR EL LOGIN DE TOKEN DB Y el token del localStorage===
PASO 1: AUMENTAR EL CODIGO DONDE CORRESPONDE...
use App\Http\Controllers\AuthController;
Route::post('/logout', [AuthController::class, 'logout']);

ASI TERMINARIA SIENDO EN ESTE CASO EL ROUTE API:
Route::prefix("v1/auth")->group(function(){ //el prefijo vi/auth funciona como el routing de angular: v1/auth/login
    Route::post('/login', [AuthController::class, "login"]); //EJECUTAR LA FUNCION login desde el authcontroller
    Route::post('/logout', [AuthController::class, 'logout']);
    //Route::middleware("auth:sanctum")->group(function(){ //middleware se usa para verificar si tienes token, si no tienes no puedes entrar
    //    Route::post('/logout', [AuthController::class, 'logout']); //v1/auth/logout
    //});
});

PASO 2: ELIMINAR TOKEN CONFIGURANDO EL logout del authcontroller
use Illuminate\Support\Facades\DB;
public function logout(Request $request)
{
    $token = $request->input('token');
    $tokenParts = explode('|', $token);
    $tokenId = $tokenParts[0] ?? null;

    if ($tokenId) {
        // Usar DB::delete con vinculaciones de parámetros
        $deleted = DB::delete('DELETE FROM personal_access_tokens WHERE id = ?', [$tokenId]);

        if ($deleted) {
            return response()->json(['message' => 'Token DB ELIMINADO'], 200);
        } else {
            return response()->json(['message' => 'Token no encontrado o no eliminado'], 404);
        }
    }

    return response()->json(['message' => 'TOKEN DB NO ENCONTRADO'], 404);
}

PASO 3: EN EL SERVICIO auth.service ADICIONAR EL logout, BUENO YA CONOCEMOS EL loginConLaravel
constructor(private http: HttpClient,private router: Router) { }

  loginConLaravel(datos:any){
    return this.http.post(`${this.ruta}api/v1/auth/login`, datos)
  }

  logout() {
    const token = localStorage.getItem('token');
    if (token) {
      this.http.post(this.ruta+'api/logout', { token }).subscribe(
        response => {
          localStorage.removeItem('token');
          this.router.navigate(['/auth/login']);
        },
        error => {
          console.error('Error al cerrar sesión:', error);

        }
      );
    } else {
      this.router.navigate(['/auth/login']);
    }
  }
  PASO 4: TERMINAR DE HACER FUNCIONAR EL BOTON PARA CERRAR SESION EN EL ANGULAR TODO TERMINAR, TODO LO NECESARIO

======================HASTA ACA TODO CHIDO HICIMOS FUNCIONAR POR ROLES LOS TOKENS ETC====================================


PERO SOY AMBICIOSO Y QUIERO ADICIONAR EL NOMBRE COMPLETO DEL USUARIO QUE INICIO SESION EN EL TOKEN BD, ENTONCES:
PASO 1: MODIFICAR TABLA DE TOKEN BD, adicionando nombrecompleto
ALTER TABLE `personal_access_tokens`
ADD COLUMN `nombrecompleto` VARCHAR(100);


PASO 2: ADICIONAR EN EL MODELO Cliente.php
public function createPersonalizedToken($tokenName, $abilities = ['*'], $expiration, $additionalInfo = [])
{
    $token = $this->createToken($tokenName, $abilities,$expiration);

    // Agregar información adicional al token
    $token->accessToken->forceFill($additionalInfo)->save();

    return $token;
}


PASO 3: USAR LA FUNCION createPersonalizedToken:
$NomC = 'LUIS CHOQUE';
$tokenResult = $admin->createPersonalizedToken('login', ['view-cliente'], now()->addMinutes(60), ['nombrecompleto' => $NomC]);



===============================CONFIGURACION DE ZONA HORARIA EN EL LARAVEL PARA LOS TOKENS=======================
PASO 1: EN .env

usar eso:
APP_TIMEZONE=America/La_Paz



=================================LISTO ACABAMOS CON EL BACKEND CON TOKENS PERSONALIZADOS=========================================




========================GUARDS DE ANGULAR CON LOS TIPOS DE TOKENS (OSEA SEGUN SU name DE TOKEN)============================
PASO 1: PASAR AL PASO 2


PASO 2: CREAR GUARD llamado "soloadmin"
ng generate guard guards/soloadmin --skip-tests  //crear en modo CAN ACTIVATE

PASO 3: CREAR UN CONTROLLER LLAMADO TokenController
php artisan make:controller TokenController

PASO 4: PEGAR EL CODIGO EN EL TOKEN CONTROLLER
<?php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Laravel\Sanctum\PersonalAccessToken;
use Carbon\Carbon;

class TokenController extends Controller
{
    public function verify(Request $request)
    {
        $token = $request->input('token');
        $tokenParts = explode('|', $token);
        $tokenId = $tokenParts[0] ?? null;
        $tokenValue = $tokenParts[1] ?? null;

        if ($tokenId && $tokenValue) {
            $personalAccessToken = PersonalAccessToken::find($tokenId);
            if ($personalAccessToken && hash_equals($personalAccessToken->token, hash('sha256', $tokenValue))) {
                // Verificar si el token ha expirado
                if ($personalAccessToken->expires_at && Carbon::now()->greaterThan(Carbon::parse($personalAccessToken->expires_at))) {
                    return response()->json(['message' => 'Token expired'], 401);
                }

                $user = $personalAccessToken->tokenable;
                return response()->json(['name' => $personalAccessToken->name, 'user' => $user], 200);
            }
        }

        return response()->json(['message' => 'Unauthorized'], 401);
    }
}

PASO 5: EN EL ROUTES API
//PARA VERIFICAR TOKENS //SIRVE PARA LOS GUARD O SABER name DEL TOKEN DB// TAMBIEN SI YA ESTA EXPIRADO
use App\Http\Controllers\TokenController;
Route::post('/verify-token', [TokenController::class, 'verify']);

PASO 6: EN EL GUARD DONDE SOLO PERMITIMOS "Admin"


import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class soloadminGuard implements CanActivate {
  ruta= environment.ruta
  constructor(protected router: Router, private http: HttpClient) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | boolean | UrlTree {

    let token = localStorage.getItem("token");
    if (token) {
      // Llamar al backend para verificar el token y su expiración
      return this.http.post<any>(this.ruta+'api/verify-token', { token }).pipe(
        map(response => {
          if (response && response.name === 'Admin') {
            return true;
          } else {
            return false;
          }
        }),
        catchError(error => {
          return of(false);
        })
      );
    } else {
      return false;
    }
  }
}



