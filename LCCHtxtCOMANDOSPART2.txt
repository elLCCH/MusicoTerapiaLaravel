===========COSAS HTML DE NO OLVIDAR============

<div class="button">
  <button class="btn mouse-dir primary">Añadir Clientes<span class="dir-part"></span></button>
  <button class="btn mouse-dir primary">
    <span *ngIf="true" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
  </button>
</div>



===============PARA CREAR FORM GROUPS==============

PODEMOS CREAR DESDE EL SERVICIO groupforms
createFormGroupClientes(): FormGroup {
    return new FormGroup({
        id:new FormControl(0),
        nombres:new FormControl('',[Validators.required]),
        apellidos:new FormControl('',[Validators.required]),
        carnet:new FormControl(''),
        celular:new FormControl('',),
        fechnac:new FormControl('',),
        edad:new FormControl('',),
        usuario:new FormControl('',),
        contrasenia:new FormControl('',),
        foto:new FormControl(''),
    })
}
entonces en el COMPONENTE PONER:
this.newClientes = this._cli.createFormGroupClientes(); //PONER EN EL CONSTRUCTOR
newClientes: FormGroup;


================PARA PONER PAGINATOR Y PIPES===================
npm install ngx-pagination --save
en el modulo poner:
import { NgxPaginationModule } from 'ngx-pagination';
import { PipesModule } from 'src/app/pipes/pipes.module';
//en el import
NgxPaginationModule,
PipesModule

//PONER ABAJO DE TABLA
<pagination-controls (pageChange)="paginaClientes = $event"
  maxSize="9"
  directionLinks="true"
  autoHide="false"
  responsive="true"
  previousLabel="Anterior"
  nextLabel="Siguiente">
  </pagination-controls>

  en los tr:
  | filterapellidosnombrescarnet:filtertxtClientes| paginate: { itemsPerPage: 2, currentPage: paginaClientes }



en el ts
paginaClientes: number = 1; // Variable de página actual para la paginación
  isLoadingClientes: boolean = true; //animacion de carga de tabña
  filtertxtClientes='' //para busqueda



  =================EJEMPLO DE PIPE... DEBERA SER standalone false =======================

  import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'filterapellidosnombrescarnet',
  standalone: false
})
export class FilterapellidosnombrescarnetPipe implements PipeTransform {

  transform(usuarios: any[], filtro: string): any[] {
    // const normalizedSearchText = arg.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toUpperCase(); //ESTO PARECE QUES PARA RESOLVER LAS TILDES
    if (!filtro) {
      return usuarios;
    }

    const palabrasFiltro = filtro.trim().toLowerCase().split(' ').filter(palabra => palabra); // Dividir el filtro en palabras y limpiar palabras vacías

    return usuarios.filter(usuario =>
      palabrasFiltro.every(palabra =>
        this.normalizarTexto(usuario.apellidos).toLowerCase().includes(this.normalizarTexto(palabra)) || // Verificar si cada palabra está presente en el nombre del usuario
        this.normalizarTexto(usuario.nombres).toLowerCase().includes(this.normalizarTexto(palabra)) ||
        this.normalizarTexto(usuario.carnet).toLowerCase().includes(this.normalizarTexto(palabra))
      )
    );
  }
  private normalizarTexto(texto: string): string {
    if (texto == null) {
      texto=' '
    }
    return texto.normalize('NFD').replace(/[\u0300-\u036f]/g, ''); // Eliminar diacríticos (tildes, etc.)
  }
}


MODULOS DE PIPE
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FilterapellidosnombrescarnetPipe } from './filters/filterapellidosnombrescarnet.pipe';



@NgModule({
  declarations: [
    FilterapellidosnombrescarnetPipe
  ],
  imports: [
    CommonModule,
  ],
  exports:[
    FilterapellidosnombrescarnetPipe
  ]
})
export class PipesModule { }



////////////////DROP AND DRAG ======================================================
PASO 1: npm install --save dropzone

PASO 2: PREPARAR EL SERVICIO
//#region SUBIDA Y BAJADA DE ARCHIVOS DRAG AND DROP
  DropzoneGestion(iddropzone:string,TamanioMaxMB:number,CantidadArchivo:number,FormatosArchivos:string):Dropzone {
    Dropzone.autoDiscover = false;
    // Sobrescribir confirmación para cancelar sin preguntar
    Dropzone.confirm = function (message, acceptedCallback, rejectedCallback) {
      if (acceptedCallback) {
        acceptedCallback();
      }
    };
    const component = this; // Referencia al componente
    const dropzone = new Dropzone('#'+iddropzone, {
      url: this.ruta + 'api/uploadFile',
      maxFilesize: TamanioMaxMB, // Tamaño máximo del archivo en MB
      maxFiles: CantidadArchivo, // Máximo de 5 archivos
      acceptedFiles: FormatosArchivos,//'image/jpeg, image/png, application/pdf', // Tipos permitidos
      addRemoveLinks: true,

      dictDefaultMessage: 'Arrastra tus archivos aquí o haz clic para seleccionar',
      dictRemoveFile: 'Eliminar archivo',
      dictCancelUpload: 'Cancelar subida',
      autoProcessQueue: true,
      init: function () {
        this.on('addedfile', function (file) {
          console.log('Archivo añadido:', file);
          const progressBar = Dropzone.createElement(
            `<div class="progress" style="height: 30px; margin-top: 10px;">
              <div class="progress-bar" role="progressbar" style="width: 0%; background-color: #4caf50;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                <div class="progress-bar-inner"></div>
              </div>
            </div>
            <hr>`
          );
          file.previewElement.appendChild(progressBar);
          const previewElement = file.previewElement;
          if (previewElement) {
            const successMark = previewElement.querySelector('.dz-success-mark');
            const errorMark = previewElement.querySelector('.dz-error-mark');
            const progress = previewElement.querySelector('.dz-progress');
            const errormessage = previewElement.querySelector('.dz-error-message');
            if (successMark) successMark.remove();
            if (errorMark) errorMark.remove();
            if (progress) progress.remove();
            if (errormessage) errormessage.remove();
          }
        });

        this.on('uploadprogress', function (file, progress) {
          console.log(`Progreso de subida: ${progress}%`);
          const progressBar = file.previewElement.querySelector('.progress-bar');
          if (progressBar) {
            progressBar.style.width = progress + '%';
            progressBar.style.backgroundColor = '#00c7f3';
            progressBar.setAttribute('aria-valuenow', progress);
          }
        });

        this.on('sending', function (file, xhr, formData) {
          console.log('Enviando archivo:', file.name);
          formData.append('type', sessionStorage.getItem('CategoriaFile'));
        });

        this.on('success', function (file, response) {
          console.log('Archivo subido exitosamente:', response);
          sessionStorage.setItem("IMG",response.filePath)
          // component. = ''
          file.serverFilePath = response.filePath;
          const progressBar = file.previewElement.querySelector('.progress-bar');
          if (progressBar) {
            progressBar.style.backgroundColor = '#4caf50'; //color verde
          }
          // setTimeout(() => { this.removeAllFiles(true); // Remover todos los archivos de la vista
          // }, 3000); // Espera 3 segundos antes de remover los archivos
        });

        this.on('error', function (file) {
          console.log('Error al subir el archivo:', file);
          const progressBar = file.previewElement.querySelector('.progress-bar');
          if (progressBar) {
            progressBar.style.backgroundColor = '#f44336';
          }
          component.MostrarMensaje("error","OCURRIO UN ERROR, SOLO SE PERMITE 1 ARCHIVO")
        });

        this.on('removedfile', function (file) {
          console.log("PASANDO POR REMOVEDFILE",file);
          // if (sessionStorage.getItem("MODOREMOVEDFILE")=='ALLDELETE') {
          //   //ELIMINANDO TODOS LOS ARCHIVOS
          //   console.log('ELIMINANDO TODOS LOS ARCHIVOS');
          //   if (file.serverFilePath) {
          //     component.EliminarArchivo(file.serverFilePath);
          //     console.log("ELIMINANDO");
          //   }
          // }
          if (file.serverFilePath) {
            component.EliminarArchivo(file.serverFilePath);
            console.log("ELIMINANDO");
          }
          sessionStorage.removeItem("IMG")
          sessionStorage.removeItem("MODOREMOVEDFILE")
        });
      },
    });
    return dropzone
  }




  EliminarArchivo(filePath: string): void {
    this.http.post(this.ruta + 'api/deleteFile', { filePath: filePath }).subscribe(
      response => {
        console.log('File deleted successfully:', response);
      },
      error => {
        console.error('Error deleting file:', error);
      }
    );
  }
  //#endregion DRAG AND DROP


PASO 3: EN EL HTML COMPONENT
    <div id="dropzone" class="dropzone"></div>Ç
    O
    <div class="mb-3 col-sm-12">
      <label class="form-text">Foto</label>
      <div id="dropzoneclientes" class="dropzone"></div>
      <hr>
      <span>IMAGEN ACTUAL:</span>
      <img [src]="ruta+newClientes.value.foto" alt="" width="50%">
    </div>

PASO 4 : EN TS COMPONENT
  import Dropzone from 'dropzone'; // Cambia esta línea para usar una importación por defecto
  //#region DROPZONE
  dataDropZone = {
    iddropzone:'dropzone',
    tamanioMB:30,
    cantidadFiles:1,
    TipoArchivos:'image/jpeg, image/png, application/pdf',
  };

  crearDropzone(): void {
    var dropzoneElement = document.getElementById("dropzone");

    if (dropzoneElement && Dropzone.instances.length > 0) {
        Dropzone.instances.forEach((instance) => {
            if (instance.element === dropzoneElement) {
                instance.destroy(); // Elimina la instancia existente
                dropzoneElement.innerHTML = ''; // Limpia el contenido residual
            }
        });
    }
    // CREATE DROPZONE
    this.dropzone = this._tools.DropzoneGestion(this.dataDropZone.iddropzone,this.dataDropZone.tamanioMB,this.dataDropZone.cantidadFiles,
      this.dataDropZone.TipoArchivos)
    console.log("drozone creado",this.dropzone);

  }
  dropzone: Dropzone;
  CancelarArchivosDropzone(): void {
    // sessionStorage.removeItem("RESET")
    sessionStorage.setItem("MODOREMOVEDFILE","ALLDELETE")
    //SE PROCEDE A ELIMINAR TODOS LOS ARCHIVOS
    if (this.dropzone) {
      this.dropzone.removeAllFiles(true); // Remover todos los archivos de la vista
    }
  }
  //#endregion DROPZONE

PASO 5: EN AgregarModificarInicios() DEL TS COMPONENT***********
ARRIBA DE: if (!id) { //PREGUNTAMOS: SI NO TIENE id?

PONER
//PARA IMAGENES
var imgValue:string = sessionStorage.getItem("IMG");
console.log("VALOR img",imgValue);
if (imgValue==null || imgValue=='') {//SI ES NULL ENTONCES NO MOVER LA INFORMACION DE ARCHIVO
}else{// SI TIENE VALORES ENTONCES ACTUALIZAR EL VALOR
    this.newInicios.value.archivo = imgValue
}
if (!id) { //PREGUNTAMOS: SI NO TIENE id?


PASO 6: EN EL MODO EDICION DEL TS COMPONENT DE LA MISMA FUNCION DE AGREGARMODIFICAR, ELIMINAR EL ANTERIOR ARCHIVO DEL DATA ANTERIOR***********

//COMO TODO SALIO BIEN ENTONCES PROCEDEMOS A ELIMINAR EL DATA ANTERIOR SI ES Q CAMBIA DE IMAGEN "ARRIBA DEL RESET"
if (this.newIniciosAnteriorAccion.controls.archivo.value==this.newInicios.controls.archivo.value) {
    //SON IGUALES ENTONCES NO ELIMINAR FILE
}else{
    this._tools.EliminarArchivo(this.newIniciosAnteriorAccion.value.archivo)
}
this.reset();


PASO 7: NO OLVIDAR ESTE SESSION, ayuda a poner el TYPE**********
sessionStorage.setItem('CategoriaFile',categoria) //CON ESTO CONTROLO EL VALOR DE CATEGORIA

PASO 8: EN EL RESET DEL CRUD PONER *********
sessionStorage.removeItem("IMG")

PASO 9: ANTES DEL: this._tools.abrirModal('modalgestionUsuarios') AL SELECCIONAR DEL CRUD Y EN LA FUNCION ABRIRMODAL **********
this.crearDropzone() //CREARDROPZONE
this._tools.abrirModal('modalgestionUsuarios')

PASO 10: PONER EN EL HTML COMPONENT LA ACCION ELIMINAR ARCHIVOS EN CASO DE CANCELAR:
PONER EN EL BOTON CANCELAR Y EN EL BOTON X DE LOS MODAL
(click)="CancelarArchivosDropzone()"
///////QUILL EDITOR =========================================================
PARA QUILL editor de texto
paso 1: npm install quill@2.0.3

paso 2: luego copiar de algun otro proyecto su assets/dist/quill copiar y pegar en nueztro proyecto

paso 3: en estilos globales copiar y pegar esto

/* #region EDITORES DISEÑO QUILL */
@import './assets/dist/quill/quill.snow.css';
@import './assets/dist/quill/quill.core.css';
/* @import './assets/dist/quill/quill.bubble.css'; */
.ql-container {
  border: 2px solid #ffffff;
  border-radius: 5px;
  /* padding: 10px; */
  color: black;
}

.ql-editor {
  font-size: 14px;
  line-height: 1.5;

  background-image: linear-gradient(to bottom, #ffffff2a, #fff);
  box-shadow: 2px 2px 4px rgb(0, 0, 0);
  border-radius: 5px;
  /* padding: 5px 10px; */
  transition: all 0.2s ease-in-out;
  font-size: 14px;
  color: #333;

}
/* .ql-video {
  width: 650px;
  height: 366px;
}
@media (max-width: 768px) {
  .ql-video {
    width: 100%;
    height: auto;
  }
}*/
/* PARA Q OCUPE EL 100% HORIZONTALMENTE */
.quill-container-wrapper {
  display: flex;
  width: 100%;
}
/*HACIENDO MAS BONITO LOS BOTONES*/
.ql-toolbar button {
  background-image: linear-gradient(to bottom, #f0f0f0, #fff);
  box-shadow: 4px 4px 4px rgb(255, 255, 255);
  border-radius: 5px;
  padding: 5px 10px;
  transition: all 0.2s ease-in-out;
  font-size: 14px;
  color: #333;
}

.ql-toolbar button:hover {
  transform: scale(1.05);
  box-shadow: 6px 6px 8px rgb(0, 0, 0);
  background-color: #e0e0e0;
}
/* DISEÑO DE CADA CATEGORIA */
.ql-formats{
  background-image: linear-gradient(to bottom, #fff, #c0baba00);
  box-shadow: 2px 2px 4px rgb(0, 0, 0);
  border-radius: 5px;
  padding: 5px 10px;
  transition: all 0.2s ease-in-out;
  font-size: 14px;
  color: #333;

}
/* DISEÑO DE TODO EL TOOL BAR */
.ql-toolbar{
  /* background-image: linear-gradient(to bottom, #f0f0f0, #fff); */
  background-image: linear-gradient(to bottom, #fff, #c0baba00);
  box-shadow: 2px 2px 4px rgb(0, 0, 0);
  border-radius: 5px;
  padding: 5px 10px;
  transition: all 0.2s ease-in-out;
  font-size: 14px;
  color: #333;
}


/* #endregion EDITORES DISEÑO QUILL */

paso 4: LUEGO ESTE ES EL EJEMPLO:
HTML
 <div id="editor-container" style="height: 300px; border: 1px solid #ccc;">asd</div>
 <button (click)="getContent()">Obtener contenido</button>
 <p>{{ output }}</p>


 TS
 import Quill from 'quill';
//#region QUILL EDITOR IMPLEMENTACION
  editor!: Quill;
  output: string = '';

  ngAfterViewInit(): void {
    const toolbarOptions = [
      ['bold', 'italic', 'underline', 'strike'], // Formatos básicos
      [{ 'header': 1 }, { 'header': 2 }], // Encabezados
      [{ 'list': 'ordered' }, { 'list': 'bullet' }], // Listas ordenadas y con viñetas
      [{ 'script': 'sub' }, { 'script': 'super' }], // Subíndice y superíndice
      [{ 'indent': '-1' }, { 'indent': '+1' }], // Indentación
      [{ 'direction': 'rtl' }], // Dirección de texto (de derecha a izquierda)
      [{ 'size': ['small', false, 'large', 'huge'] }], // Tamaños de texto
      [{ 'header': [1, 2, 3, 4, 5, 6, false] }], // Niveles de encabezado
      [{ 'color': [] }, { 'background': [] }], // Colores de texto y fondo
      [{ 'font': [] }], // Fuentes
      [{ 'align': [] }], // Alineación de texto
      ['link', 'video'], // Insertar enlaces, imágenes y videos
      ['clean'], // Eliminar formato
    ];

    this.editor = new Quill('#editor-container', {
      theme: 'snow', // Tema Snow (estilo predeterminado)
      modules: {
        toolbar: {
          container: toolbarOptions, // Configuración de la barra de herramientas
        },
      },
      placeholder: 'Escribe aquí...',
      formats: [
        'bold', 'italic', 'underline', 'strike', // Formatos básicos
        'header', 'list', 'bullet', 'script', // Encabezados, listas y sub/superíndice
        'indent', 'direction', 'size', 'color', 'background', // Otros formatos
        'font', 'align', 'link', 'video', // Fuentes y multimedia
      ],
    });
  }

  getContent(): void {
    this.output = this.editor.root.innerHTML;
    console.log('Contenido del editor:', this.output);
  }


  //////////////MEJOR ESTE
    npm install ngx-quill@26 (26 X Q ES COMPATIBLE CON ANGULAR 18)
    npm install --save-dev @types/quill


    SERVICIO
    modulesQuillEdicion={
        toolbar:[
        ['bold', 'italic', 'underline', 'strike'], // Formatos básicos
        [{ 'header': 1 }, { 'header': 2 }], // Encabezados
        [{ 'list': 'ordered' }, { 'list': 'bullet' }], // Listas ordenadas y con viñetas
        [{ 'script': 'sub' }, { 'script': 'super' }], // Subíndice y superíndice
        [{ 'indent': '-1' }, { 'indent': '+1' }], // Indentación
        [{ 'direction': 'rtl' }], // Dirección de texto (de derecha a izquierda)
        [{ 'size': ['small', false, 'large', 'huge'] }], // Tamaños de texto
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }], // Niveles de encabezado
        [{ 'color': [] }, { 'background': [] }], // Colores de texto y fondo
        [{ 'font': [] }], // Fuentes
        [{ 'align': [] }], // Alineación de texto
        ['link', 'video'], // Insertar enlaces, imágenes y videos
        ['clean'], // Eliminar formato
        ]
    }
    modulesQuillShow={
        toolbar:''
    }

    MODULO:
    import {QuillModule} from 'ngx-quill';
    IMPORT [QuillModule]


    MODO LECTURA:
    <quill-editor class="quill-container-wrapper" [modules]="_tools.modulesQuillShow" [(ngModel)]="a.notas"></quill-editor>
    MODO EDICION:
    <quill-editor class="quill-container-wrapper" [modules]="_tools.modulesQuillEdicion" formControlName="notas"></quill-editor>

  //#endregion QUILL EDITOR




//-----------------------------MODALS OPENS CERRAR, CERRAR TODOS


PASO 1: EN EL SERVICIO
//#region COSAS DE BOOSTRAP
  //MODALS
  private modales: { [id: string]: Modal } = {};
  abrirModal(modalId: string): void {
    const modalElement = document.getElementById(modalId);
    if (modalElement) {
      if (!this.modales[modalId]) {
        this.modales[modalId] = new Modal(modalElement);
      }
      this.modales[modalId].show();
    } else {
      console.error(`No se encontró un modal con el ID "${modalId}"`);
    }
  }

  cerrarModales(): void {
    Object.keys(this.modales).forEach((id) => {
      this.modales[id].hide();
      delete this.modales[id];
    });
  }

  cerrarModal(modalId: string): void {
    // const modal = document.getElementById(modalId); if (modal) { modal.style.display = 'none'; }
    var cerrado = false
    if (this.modales[modalId]) {
      this.modales[modalId].hide();
      cerrado=true
    }

    const modalElement = document.getElementById(modalId);
    if (modalElement && cerrado == false) {
      console.warn(`No se encontró un modal con el ID "${modalId}" en la colección 'modales'. Intentando cerrarlo desde el DOM...`);
        // Intentar cerrar el modal utilizando una referencia al elemento del DOM
        const modalInstance = Modal.getInstance(modalElement);
        if (modalInstance) {
            modalInstance.hide();
            console.log(`Modal con ID "${modalId}" cerrado utilizando instancia de Bootstrap.`);
        } else {
            console.error(`No se pudo obtener la instancia de Bootstrap para el modal con ID "${modalId}".`);
        }

        // Asegurarse de eliminar el backdrop del DOM
        const backdropElements = document.getElementsByClassName('modal-backdrop');
        if (backdropElements.length > 0) {
            // Eliminar todos los elementos de backdrop
            for (let i = backdropElements.length - 1; i >= 0; i--) {
                backdropElements[i].parentNode.removeChild(backdropElements[i]);
            }
            console.log(`Backdrop eliminado para el modal con ID "${modalId}".`);
        }
    } else {
        console.error(`No se encontró un modal con el ID "${modalId}" en el DOM.`);
    }
  }


  //#endregion COSAS DE BOOSTRAP

  PASO 2: EN LOS TS COMPONENT LIMPIAR LOS MODALS PONIENDO:
  ngOnDestroy(): void {
    this._tools.cerrarModales();
  }





////////////////////////////IMPORTANTE AL SUBIR AL HOSTING PARA LOS ARCHIVOS////////////////////////////////
PARA EVITAR EL PROBLEMA DE LOS ARCHIVOS EN EL HOSTING:

PASO 1: IR A el archivo que hay q modificar en el hosting esta en esta direccion \vendor\laravel\framework\src\Illuminate\Foundation\helpers.php

mirar esta cosa importante para los archivos sobre el PUBLIC_HTML
ESTO SE PUSO EN:
return app()->make('path.public').($path ? DIRECTORY_SEPARATOR.ltrim($path, DIRECTORY_SEPARATOR) :$path);

SE PUSO ACA EN EL HELPERS.PHP
if (! function_exists('public_path')) {
    /**
     * Get the path to the public folder.
     *
     * @param  string  $path
     * @return string
     */
    function public_path($path = '')
    {
        //return app()->publicPath($path); //SE COMENTO ESTO(QUITA ESTE COMENTARIO)
        return app()->make('path.public').($path ? DIRECTORY_SEPARATOR.ltrim($path, DIRECTORY_SEPARATOR) :$path); //ORIGINAL QUE HACE FUNCIONAR
    }
}
